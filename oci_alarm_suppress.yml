# file : oci_alarm_suppress.yml
# description : Automates the backing up of boot volume of the host
#
#
# ——Date—————|——————— Author————————————|————Company—————|————Version Number————|————Change——————————————————————————————
# 08-May-2024      Sridhar Doki         Centroid             1.0                0. Initial Version
#
#
#
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# This script gets the alarm details and matches with the host or ocid and will suppress them
- name: Get Alarm Details based on the host display name or OCID
  block:
    #==========================================================================================
    - name: List alarms for each compartment based on the host compartment
      oci_monitoring_alarm_facts:
        compartment_id: "{{ instance_compartment }}"
        lifecycle_state: ACTIVE
      register: result

    - set_fact:
        alarm_results: "{{ result.alarms }}"

    - debug:
        msg: instance name "{{ instance_name }}"

    - name: Extract Alarm IDs
      set_fact:
        alarm_ids: "{{ alarm_ids + [result_item.id] }}"
      loop: "{{ alarm_results }}"
      when: alarm_results | length > 0 and (("resourceDisplayName = \"" + instance_name + "\"") in result_item.query or instance_id in result_item.query)
      loop_control:
        loop_var: result_item


    - name: Debug alarm_ids
      debug:
        var: alarm_ids

###

    # - name: Initialize alarm lists
    #   set_fact:
    #     alarms_with_dimensions: []
    #     alarms_without_dimensions: []


    # - name: Identify alarms with dimensions
    #   set_fact:
    #     alarms_with_dimensions: "{{ alarms_with_dimensions + [result_item.id] }}"
    #   loop: "{{ alarm_results }}"
    #   when: 
    #     - alarm_results | length > 0
    #     - ('"resourceDisplayName' in result_item.query) or ('instance_id' in result_item.query)
    #   loop_control:
    #     loop_var: result_item


    # - name: Identify alarms without dimensions
    #   set_fact:
    #     alarms_without_dimensions: "{{ alarms_without_dimensions + [result_item.id] }}"
    #   loop: "{{ alarm_results }}"
    #   when: 
    #     - alarm_results | length > 0
    #     - ('"resourceDisplayName' not in result_item.query) and ('instance_id' not in result_item.query)
    #   loop_control:
    #     loop_var: result_item

    # - name: Debug Alarms with Dimensions
    #   debug:
    #     var: alarms_with_dimensions

    # - name: Debug Alarms without Dimensions
    #   debug:
    #     var: alarms_without_dimensions

    # - name: Suppress alarms WITH dimensions
    #   oracle.oci.oci_monitoring_alarm_suppression:
    #     alarm_id: "{{ alarm_item }}"
    #     alarm_suppression_target:
    #       target_type: "ALARM"
    #       alarm_id: "{{ alarm_item }}"
    #     display_name: "Suppression for {{ instance_name }}"
    #     dimensions:
    #       resourceDisplayName: "{{ instance_name }}"
    #     time_suppress_from: "{{ start_time_main }}"
    #     time_suppress_until: "{{ end_time_main }}"
    #   with_items: "{{ alarms_with_dimensions }}"
    #   loop_control:
    #     loop_var: alarm_item
    #   when: alarms_with_dimensions | length > 0

    # - name: Suppress alarms WITHOUT dimensions
    #   oracle.oci.oci_monitoring_alarm_suppression:
    #     alarm_id: "{{ alarm_item }}"
    #     alarm_suppression_target:
    #       target_type: "ALARM"
    #       alarm_id: "{{ alarm_item }}"
    #     display_name: "Global Suppression"
    #     time_suppress_from: "{{ start_time_main }}"
    #     time_suppress_until: "{{ end_time_main }}"
    #   with_items: "{{ alarms_without_dimensions }}"
    #   loop_control:
    #     loop_var: alarm_item
    #   when: alarms_without_dimensions | length > 0


###




    - name: Build dictionary of alarms with resourceDisplayName
      set_fact:
        alarm_dict: "{{ alarm_dict | default({}) | combine({ result_item.id: resource_name }) }}"
      loop: "{{ alarm_results }}"
      when: 
        - alarm_results | length > 0
        - ("resourceDisplayName = \"" + instance_name + "\"") in result_item.query or instance_id in result_item.query
      loop_control:
        loop_var: result_item
      vars:
        resource_name: "{{ result_item.query | regex_search('resourceDisplayName = \\\"(.*?)\\\"', '\\1') | first | default('') }}"


    - name: Debug alarm_dict
      debug:
        var: alarm_dict
        



  rescue:
    - fail:
        msg: "{{ ansible_failed_task }} {{ ansible_failed_result }}"
